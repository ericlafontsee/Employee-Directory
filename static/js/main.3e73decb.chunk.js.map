{"version":3,"sources":["utils/API.js","components/TableRow/index.js","components/Container/index.js","components/Row/index.js","pages/Search.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","TableRow","props","src","picture","alt","firstName","lastName","email","phone","Container","className","style","children","Row","Search","state","searchField","employees","filtered","error","searchEmployee","event","value","target","toLowerCase","setState","filter","o","trim","includes","API","then","res","data","results","map","name","first","last","thumbnail","cell","catch","err","console","log","minHeight","width","margin","this","onChange","color","fontSize","record","key","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sYAGe,EACH,WACR,OAAOA,IAAMC,IAAI,kD,MCiBNC,MAnBf,SAAkBC,GACd,OAAQ,4BACJ,4BACI,yBAAKC,IAAKD,EAAME,QAASC,IAAKH,EAAMI,aAExC,4BACKJ,EAAMI,WAEX,4BACKJ,EAAMK,UAEX,4BACKL,EAAMM,OAEX,4BACKN,EAAMO,S,MCVJC,MAJf,SAAmBR,GACjB,OAAO,yBAAKS,UAAU,yBAAyBC,MAAOV,EAAMU,OAAQV,EAAMW,W,MCG7DC,MAJf,SAAaZ,GACX,OAAO,yBAAKS,UAAU,OAAOT,EAAMW,WCgFtBE,E,4MA9EbC,MAAQ,CACNC,YAAa,GACbC,UAAW,GACXC,SAAU,GACVC,MAAO,I,EAoBTC,eAAiB,SAACC,GAChB,IAAMC,EAAQD,EAAME,OAAOD,MAAME,cACjC,EAAKC,SAAS,CACZT,YAAaM,EACbJ,SAAU,EAAKH,MAAME,UAAUS,QAAO,SAAAC,GAEpC,OADeA,EAAEtB,UAAUmB,cAAcI,OAASD,EAAErB,SAASkB,cAAcI,QAC9DC,SAASP,S,kEAvBP,IAAD,OAClBQ,IACGC,MAAK,SAACC,GACL,IACMf,EADOe,EAAIC,KAAKC,QACCC,KAAI,SAACR,GAAD,MAAQ,CACjCtB,UAAWsB,EAAES,KAAKC,MAClB/B,SAAUqB,EAAES,KAAKE,KACjB/B,MAAOoB,EAAEpB,MACTJ,QAASwB,EAAExB,QAAQoC,UACnB/B,MAAOmB,EAAEa,SAGX,EAAKf,SAAS,CAAER,UAAWA,EAAWC,SAAUD,OAEjDwB,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAe9B,OACE,kBAAC,EAAD,CAAW/B,MAAO,CAAEkC,UAAW,QAC7B,kBAAC,EAAD,CAAKlC,MAAO,CAAEmC,MAAO,SACnB,2BACAnC,MAAO,CAAEoC,OAAQ,SAAUD,MAAO,OAChCV,KAAK,cACLd,MAAO0B,KAAKjC,MAAMC,YAClBiC,SAAUD,KAAK5B,kBAGnB,kBAAC,EAAD,KACE,2BAAOT,MAAO,CAAEmC,MAAO,QAAUpC,UAAU,aACzC,+BACE,wBAAIC,MAAO,CAAEuC,MAAO,QAASC,SAAU,SACrC,6BACA,0CACA,yCACA,qCACA,8CAGJ,+BACGH,KAAKjC,MAAMG,SAASiB,KAAI,SAACiB,EAAQC,GAChC,OACE,kBAAC,EAAD,CACEhD,UAAW+C,EAAO/C,UAClBC,SAAU8C,EAAO9C,SACjBC,MAAO6C,EAAO7C,MACdC,MAAO4C,EAAO5C,MACdL,QAASiD,EAAOjD,QAChBkD,IAAKA,e,GAnEJC,a,MCGNC,MANf,WACI,OAAQ,4BAAQ7C,UAAU,0BACtB,oD,MCWO8C,MATf,WACE,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAtB,GACLwB,QAAQxB,MAAMA,EAAMoD,c","file":"static/js/main.3e73decb.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport default {\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TableRow(props){\n    return (<tr> \n        <td>\n            <img src={props.picture} alt={props.firstName}></img>\n        </td>\n        <td>\n            {props.firstName}\n        </td>\n        <td>\n            {props.lastName}\n        </td>\n        <td>\n            {props.email}\n        </td>\n        <td>\n            {props.phone}\n        </td>\n    </tr>)\n}\nexport default TableRow;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Container(props) {\n  return <div className=\"container bg-secondary\" style={props.style}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Row(props) {\n  return <div className=\"row\">{props.children}</div>;\n}\n\nexport default Row;\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport TableRow from \"../components/TableRow\";\nimport Container from \"../components/Container\";\nimport Row from \"../components/Row\";\n\nclass Search extends Component {\n  state = {\n    searchField: \"\",\n    employees: [],\n    filtered: [],\n    error: \"\"\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        const data = res.data.results;\n        const employees = data.map((o) => ({\n          firstName: o.name.first,\n          lastName: o.name.last,\n          email: o.email,\n          picture: o.picture.thumbnail,\n          phone: o.cell\n        }));\n\n        this.setState({ employees: employees, filtered: employees });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  searchEmployee = (event) => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      searchField: value,\n      filtered: this.state.employees.filter(o => {\n          const name = o.firstName.toLowerCase().trim() + o.lastName.toLowerCase().trim();\n        return (name.includes(value));\n      })\n    });\n  };\n\n  render() {\n    return (\n      <Container style={{ minHeight: \"80%\" }}>\n        <Row style={{ width: \"100%\" }}>\n          <input\n          style={{ margin: \"0 auto\", width: \"50%\" }}\n            name=\"searchField\"\n            value={this.state.searchField}\n            onChange={this.searchEmployee}\n          />\n        </Row>\n        <Row>\n          <table style={{ width: \"100%\" }} className=\"col-md-12\">\n            <thead>\n              <tr style={{ color: \"white\", fontSize: \"25px\" }}>\n                <th></th>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Email</th>\n                <th>Phone Number</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.filtered.map((record, key) => {\n                return (\n                  <TableRow\n                    firstName={record.firstName}\n                    lastName={record.lastName}\n                    email={record.email}\n                    phone={record.phone}\n                    picture={record.picture}\n                    key={key}\n                  />\n                );\n              })}\n            </tbody>\n          </table>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(){\n    return (<header className=\"bg-primary text-center\">\n        <h1>Employee Directory</h1>\n    </header>)\n}\n\nexport default Header;","import React from \"react\";\nimport Search from \"./pages/Search\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n        <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}