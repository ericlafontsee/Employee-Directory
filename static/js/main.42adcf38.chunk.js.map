{"version":3,"sources":["utils/API.js","components/TableRow/index.js","pages/Search.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","TableRow","props","src","picture","alt","firstName","lastName","email","phone","Search","state","searchField","employee","results","error","searchEmployee","event","value","target","setState","console","log","employeeList","currentEmployees","i","length","indexOf","push","API","then","res","data","employeeRecords","name","first","last","thumbnail","cell","catch","err","this","onChange","map","record","key","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kTAIe,EACH,WACR,OAAOA,IAAMC,IAAI,kDCeNC,MAnBf,SAAkBC,GACd,OAAQ,4BACJ,4BACI,yBAAKC,IAAKD,EAAME,QAASC,IAAKH,EAAMI,aAExC,4BACKJ,EAAMI,WAEX,4BACKJ,EAAMK,UAEX,4BACKL,EAAMM,OAEX,4BACKN,EAAMO,SCmEJC,E,4MA/EbC,MAAQ,CACNC,YAAa,GACbC,SAAU,GACVC,QAAS,GACTC,MAAO,I,EAuBRC,eAAiB,SAACC,GACf,IAAIC,EAAQD,EAAME,OAAOD,MACzB,EAAKE,SAAS,CAACR,YAAaM,IAC5BG,QAAQC,IAAIJ,GAGZ,IAFA,IAAIK,EAAe,GACfC,EAAmB,EAAKb,MAAME,SAC1BY,EAAI,EAAGA,EAAID,EAAiBE,OAAQD,IACtCD,EAAiBC,GAAGnB,UAAUqB,QAAQT,IAAU,GAClDK,EAAaK,KAAKJ,EAAiBC,IAMvCJ,QAAQC,IAAIC,GACZ,EAAKH,SAAS,CAACP,SAAUU,K,kEAlCR,IAAD,OAClBM,IACGC,MAAK,SAACC,GACLV,QAAQC,IAAIS,GAGZ,IAFA,IAAMC,EAAOD,EAAIC,KAAKlB,QAClBmB,EAAkB,GACbR,EAAI,EAAGA,EAAIO,EAAKN,OAAQD,IAC/BQ,EAAgBL,KAAK,CACnBtB,UAAW0B,EAAKP,GAAGS,KAAKC,MACxB5B,SAAUyB,EAAKP,GAAGS,KAAKE,KACvB5B,MAAOwB,EAAKP,GAAGjB,MACfJ,QAAS4B,EAAKP,GAAGrB,QAAQiC,UACzB5B,MAAOuB,EAAKP,GAAGa,OAGnB,EAAKlB,SAAS,CAAEP,SAAUoB,EAAiBnB,QAASmB,OAErDM,OAAM,SAACC,GAAD,OAASnB,QAAQC,IAAIkB,Q,+BAsB9B,OACE,6BACE,2BAAON,KAAK,cAAchB,MAAOuB,KAAK9B,MAAMC,YAAa8B,SAAUD,KAAKzB,iBACxE,+BACE,+BACE,4BACA,6BACE,0CACA,yCACA,qCACA,8CAGJ,+BACGyB,KAAK9B,MAAME,SAAS8B,KAAI,SAACC,EAAQC,GAChC,OAAQ,kBAAC,EAAD,CACNvC,UAAasC,EAAOtC,UACpBC,SAAYqC,EAAOrC,SACnBC,MAASoC,EAAOpC,MAChBC,MAASmC,EAAOnC,MAChBL,QAAWwC,EAAOxC,QAClByC,IAAOA,c,GArEFC,aCINC,MANf,WACI,OAAQ,gCACJ,oD,MCYOC,MATf,WACE,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAxB,GACLM,QAAQN,MAAMA,EAAMgD,c","file":"static/js/main.42adcf38.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\n\nexport default {\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};\n","import React from \"react\";\n\nfunction TableRow(props){\n    return (<tr>\n        <td>\n            <img src={props.picture} alt={props.firstName}></img>\n        </td>\n        <td>\n            {props.firstName}\n        </td>\n        <td>\n            {props.lastName}\n        </td>\n        <td>\n            {props.email}\n        </td>\n        <td>\n            {props.phone}\n        </td>\n    </tr>)\n}\nexport default TableRow;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport TableRow from \"../components/TableRow\";\n\nclass Search extends Component {\n  state = {\n    searchField: \"\",\n    employee: [],\n    results: [],\n    error: \"\"\n  };\n\n  // When the component mounts, get a list of all available base breeds and update this.state.breeds\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        console.log(res);\n        const data = res.data.results;\n        var employeeRecords = [];\n        for (var i = 0; i < data.length; i++) {\n          employeeRecords.push({\n            firstName: data[i].name.first,\n            lastName: data[i].name.last,\n            email: data[i].email,\n            picture: data[i].picture.thumbnail,\n            phone: data[i].cell\n          });\n        }\n        this.setState({ employee: employeeRecords, results: employeeRecords });\n      })\n      .catch((err) => console.log(err));\n  }\n   searchEmployee = (event) => {\n      var value = event.target.value;\n      this.setState({searchField: value});\n      console.log(value);\n      var employeeList = [];\n      var currentEmployees = this.state.employee;\n      for(var i = 0; i < currentEmployees.length; i++){\n        if (currentEmployees[i].firstName.indexOf(value) > -1){\n          employeeList.push(currentEmployees[i]);\n        }\n      }\n      // var employeeList = this.state.employee.filter(o => {\n      //   return (o.firstName == value);\n      // })\n      console.log(employeeList);\n      this.setState({employee: employeeList});\n      \n   }\n\n  render() {\n    return (\n      <div>\n        <input name=\"searchField\" value={this.state.searchField} onChange={this.searchEmployee}/>\n        <table>\n          <thead>\n            <tr>\n            <th></th>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Phone Number</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employee.map((record, key)=> {\n              return (<TableRow \n                firstName = {record.firstName}\n                lastName = {record.lastName}\n                email = {record.email}\n                phone = {record.phone}\n                picture = {record.picture}\n                key = {key}\n                />\n                );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\n\nfunction Header(){\n    return (<header>\n        <h1>Employee Directory</h1>\n    </header>)\n}\n\nexport default Header;","import React from \"react\";\nimport Search from \"./pages/Search\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n        <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}